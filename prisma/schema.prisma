generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}

model authors {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  first_name   String         @db.VarChar(255)
  last_name    String         @db.VarChar(255)
  birth_date   DateTime       @db.Date
  organization String         @db.VarChar(255)
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  publications publications[]
}

model publication_types {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  name         String         @db.VarChar(255)
  description  String         @db.Text
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  publications publications[]
}

model publications {
  id                  BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  title               String            @db.VarChar(255)
  abstract            String            @db.Text
  content             String            @db.LongText
  publication_date    DateTime          @db.Date
  author_id           BigInt            @db.UnsignedBigInt
  publication_type_id BigInt            @db.UnsignedBigInt
  created_at          DateTime?         @db.Timestamp(0)
  updated_at          DateTime?         @db.Timestamp(0)
  images              images[]
  authors             authors           @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "publications_author_id_foreign")
  publication_types   publication_types @relation(fields: [publication_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "publications_publication_type_id_foreign")

  @@index([author_id], map: "publications_author_id_foreign")
  @@index([publication_type_id], map: "publications_publication_type_id_foreign")
}

model images {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  publication_id BigInt       @db.UnsignedBigInt
  file_id        String?      @db.VarChar(255)
  url            String       @db.VarChar(255)
  provider       String       @default("imagekit") @db.VarChar(255)
  width          Int?         @db.UnsignedInt
  height         Int?         @db.UnsignedInt
  size           BigInt?      @db.UnsignedBigInt
  mime           String?      @db.VarChar(100)
  alt            String?      @db.VarChar(255)
  caption        String?      @db.Text
  sort_order     Int          @default(0)
  metadata       Json?
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  publications   publications @relation(fields: [publication_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "images_publication_id_foreign")

  @@index([file_id], map: "images_file_id_index")
  @@index([publication_id], map: "images_publication_id_foreign")
}
